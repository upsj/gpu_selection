
template __device__ __host__ void partition<double,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const double* in, double* out, index* counts, index size, double pivot);
template __device__ __host__ void partition<double,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const double* in, double* out, index* counts, index size, double pivot);
template __device__ __host__ void partition<double,select_config<10, 5, 8, false, true, true, 8, 10, 10>>(const double* in, double* out, index* counts, index size, double pivot);
template __device__ __host__ void partition<double,select_config<10, 5, 8, true, true, true, 8, 10, 10>>(const double* in, double* out, index* counts, index size, double pivot);
template __device__ __host__ void partition<float,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const float* in, float* out, index* counts, index size, float pivot);
template __device__ __host__ void partition<float,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const float* in, float* out, index* counts, index size, float pivot);
template __device__ __host__ void partition<float,select_config<10, 5, 8, false, true, true, 8, 10, 10>>(const float* in, float* out, index* counts, index size, float pivot);
template __device__ __host__ void partition<float,select_config<10, 5, 8, true, true, true, 8, 10, 10>>(const float* in, float* out, index* counts, index size, float pivot);
template __device__ void kernels::masked_prefix_sum<10>(index* counts, const mask* m);
template __device__ void kernels::masked_prefix_sum<6>(index* counts, const mask* m);
template __device__ void kernels::masked_prefix_sum<7>(index* counts, const mask* m);
template __device__ void kernels::masked_prefix_sum<8>(index* counts, const mask* m);
template __device__ void kernels::masked_prefix_sum<9>(index* counts, const mask* m);
template __global__ void kernels::count_buckets<double, select_config<10, 10, 8, false, false, false, 8, 10, 10>>(const double* in, const double* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<double, select_config<10, 10, 8, false, true, false, 8, 10, 10>>(const double* in, const double* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<double, select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const double* in, const double* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<double, select_config<10, 10, 8, true, false, false, 8, 10, 10>>(const double* in, const double* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<double, select_config<10, 10, 8, true, true, false, 8, 10, 10>>(const double* in, const double* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<double, select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const double* in, const double* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<double, select_config<10, 11, 9, false, true, false, 8, 10, 10>>(const double* in, const double* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<double, select_config<10, 11, 9, true, true, false, 8, 10, 10>>(const double* in, const double* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<double, select_config<10, 8, 6, false, true, false, 8, 10, 10>>(const double* in, const double* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<double, select_config<10, 8, 6, true, true, false, 8, 10, 10>>(const double* in, const double* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<double, select_config<10, 9, 7, false, true, false, 8, 10, 10>>(const double* in, const double* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<double, select_config<10, 9, 7, true, true, false, 8, 10, 10>>(const double* in, const double* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<float, select_config<10, 10, 8, false, false, false, 8, 10, 10>>(const float* in, const float* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<float, select_config<10, 10, 8, false, true, false, 8, 10, 10>>(const float* in, const float* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<float, select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const float* in, const float* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<float, select_config<10, 10, 8, true, false, false, 8, 10, 10>>(const float* in, const float* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<float, select_config<10, 10, 8, true, true, false, 8, 10, 10>>(const float* in, const float* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<float, select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const float* in, const float* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<float, select_config<10, 11, 9, false, true, false, 8, 10, 10>>(const float* in, const float* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<float, select_config<10, 11, 9, true, true, false, 8, 10, 10>>(const float* in, const float* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<float, select_config<10, 12, 10, false, true, false, 8, 10, 10>>(const float* in, const float* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<float, select_config<10, 12, 10, true, true, false, 8, 10, 10>>(const float* in, const float* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<float, select_config<10, 8, 6, false, true, false, 8, 10, 10>>(const float* in, const float* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<float, select_config<10, 8, 6, true, true, false, 8, 10, 10>>(const float* in, const float* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<float, select_config<10, 9, 7, false, true, false, 8, 10, 10>>(const float* in, const float* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::count_buckets<float, select_config<10, 9, 7, true, true, false, 8, 10, 10>>(const float* in, const float* tree, index* counts, poracle* oracles, index size, index workcount);
template __global__ void kernels::partition<double,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const double* in, double* out, index* atomic, index size, double pivot, index workcount);
template __global__ void kernels::partition<double,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const double* in, double* out, index* atomic, index size, double pivot, index workcount);
template __global__ void kernels::partition<double,select_config<10, 5, 8, false, true, true, 8, 10, 10>>(const double* in, double* out, index* atomic, index size, double pivot, index workcount);
template __global__ void kernels::partition<double,select_config<10, 5, 8, true, true, true, 8, 10, 10>>(const double* in, double* out, index* atomic, index size, double pivot, index workcount);
template __global__ void kernels::partition<float,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const float* in, float* out, index* atomic, index size, float pivot, index workcount);
template __global__ void kernels::partition<float,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const float* in, float* out, index* atomic, index size, float pivot, index workcount);
template __global__ void kernels::partition<float,select_config<10, 5, 8, false, true, true, 8, 10, 10>>(const float* in, float* out, index* atomic, index size, float pivot, index workcount);
template __global__ void kernels::partition<float,select_config<10, 5, 8, true, true, true, 8, 10, 10>>(const float* in, float* out, index* atomic, index size, float pivot, index workcount);
template __global__ void kernels::partition_distr<double,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const double* in, double* out, const index* counts, index size, double pivot, index workcount);
template __global__ void kernels::partition_distr<double,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const double* in, double* out, const index* counts, index size, double pivot, index workcount);
template __global__ void kernels::partition_distr<double,select_config<10, 5, 8, false, true, true, 8, 10, 10>>(const double* in, double* out, const index* counts, index size, double pivot, index workcount);
template __global__ void kernels::partition_distr<double,select_config<10, 5, 8, true, true, true, 8, 10, 10>>(const double* in, double* out, const index* counts, index size, double pivot, index workcount);
template __global__ void kernels::partition_distr<float,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const float* in, float* out, const index* counts, index size, float pivot, index workcount);
template __global__ void kernels::partition_distr<float,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const float* in, float* out, const index* counts, index size, float pivot, index workcount);
template __global__ void kernels::partition_distr<float,select_config<10, 5, 8, false, true, true, 8, 10, 10>>(const float* in, float* out, const index* counts, index size, float pivot, index workcount);
template __global__ void kernels::partition_distr<float,select_config<10, 5, 8, true, true, true, 8, 10, 10>>(const float* in, float* out, const index* counts, index size, float pivot, index workcount);
template __global__ void kernels::partition_prefixsum<select_config<10, 10, 8, false, true, true, 8, 10, 10>>(index* counts, index block_count);
template __global__ void kernels::partition_prefixsum<select_config<10, 10, 8, true, true, true, 8, 10, 10>>(index* counts, index block_count);
template __global__ void kernels::partition_prefixsum<select_config<10, 5, 8, false, true, true, 8, 10, 10>>(index* counts, index block_count);
template __global__ void kernels::partition_prefixsum<select_config<10, 5, 8, true, true, true, 8, 10, 10>>(index* counts, index block_count);
template __global__ void kernels::prefix_sum_counts<select_config<10, 10, 8, false, false, false, 8, 10, 10>>(index* in, index* out, index);
template __global__ void kernels::prefix_sum_counts<select_config<10, 10, 8, false, true, false, 8, 10, 10>>(index* in, index* out, index);
template __global__ void kernels::prefix_sum_counts<select_config<10, 10, 8, false, true, true, 8, 10, 10>>(index* in, index* out, index);
template __global__ void kernels::prefix_sum_counts<select_config<10, 10, 8, true, false, false, 8, 10, 10>>(index* in, index* out, index);
template __global__ void kernels::prefix_sum_counts<select_config<10, 10, 8, true, true, false, 8, 10, 10>>(index* in, index* out, index);
template __global__ void kernels::prefix_sum_counts<select_config<10, 10, 8, true, true, true, 8, 10, 10>>(index* in, index* out, index);
template __global__ void kernels::prefix_sum_counts<select_config<10, 11, 9, false, true, false, 8, 10, 10>>(index* in, index* out, index);
template __global__ void kernels::prefix_sum_counts<select_config<10, 11, 9, true, true, false, 8, 10, 10>>(index* in, index* out, index);
template __global__ void kernels::prefix_sum_counts<select_config<10, 12, 10, false, true, false, 8, 10, 10>>(index* in, index* out, index);
template __global__ void kernels::prefix_sum_counts<select_config<10, 12, 10, true, true, false, 8, 10, 10>>(index* in, index* out, index);
template __global__ void kernels::prefix_sum_counts<select_config<10, 8, 6, false, true, false, 8, 10, 10>>(index* in, index* out, index);
template __global__ void kernels::prefix_sum_counts<select_config<10, 8, 6, true, true, false, 8, 10, 10>>(index* in, index* out, index);
template __global__ void kernels::prefix_sum_counts<select_config<10, 9, 7, false, true, false, 8, 10, 10>>(index* in, index* out, index);
template __global__ void kernels::prefix_sum_counts<select_config<10, 9, 7, true, true, false, 8, 10, 10>>(index* in, index* out, index);
template __global__ void kernels::reduce_counts<select_config<10, 10, 8, false, false, false, 8, 10, 10>>(const index* in, index* out, index);
template __global__ void kernels::reduce_counts<select_config<10, 10, 8, false, true, false, 8, 10, 10>>(const index* in, index* out, index);
template __global__ void kernels::reduce_counts<select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const index* in, index* out, index);
template __global__ void kernels::reduce_counts<select_config<10, 10, 8, true, false, false, 8, 10, 10>>(const index* in, index* out, index);
template __global__ void kernels::reduce_counts<select_config<10, 10, 8, true, true, false, 8, 10, 10>>(const index* in, index* out, index);
template __global__ void kernels::reduce_counts<select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const index* in, index* out, index);
template __global__ void kernels::reduce_counts<select_config<10, 11, 9, false, true, false, 8, 10, 10>>(const index* in, index* out, index);
template __global__ void kernels::reduce_counts<select_config<10, 11, 9, true, true, false, 8, 10, 10>>(const index* in, index* out, index);
template __global__ void kernels::reduce_counts<select_config<10, 12, 10, false, true, false, 8, 10, 10>>(const index* in, index* out, index);
template __global__ void kernels::reduce_counts<select_config<10, 12, 10, true, true, false, 8, 10, 10>>(const index* in, index* out, index);
template __global__ void kernels::reduce_counts<select_config<10, 8, 6, false, true, false, 8, 10, 10>>(const index* in, index* out, index);
template __global__ void kernels::reduce_counts<select_config<10, 8, 6, true, true, false, 8, 10, 10>>(const index* in, index* out, index);
template __global__ void kernels::reduce_counts<select_config<10, 9, 7, false, true, false, 8, 10, 10>>(const index* in, index* out, index);
template __global__ void kernels::reduce_counts<select_config<10, 9, 7, true, true, false, 8, 10, 10>>(const index* in, index* out, index);
template __global__ void partition_count<double,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const double* in, index* counts, index size, double pivot, index workcount);
template __global__ void partition_count<double,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const double* in, index* counts, index size, double pivot, index workcount);
template __global__ void partition_count<double,select_config<10, 5, 8, false, true, true, 8, 10, 10>>(const double* in, index* counts, index size, double pivot, index workcount);
template __global__ void partition_count<double,select_config<10, 5, 8, true, true, true, 8, 10, 10>>(const double* in, index* counts, index size, double pivot, index workcount);
template __global__ void partition_count<float,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const float* in, index* counts, index size, float pivot, index workcount);
template __global__ void partition_count<float,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const float* in, index* counts, index size, float pivot, index workcount);
template __global__ void partition_count<float,select_config<10, 5, 8, false, true, true, 8, 10, 10>>(const float* in, index* counts, index size, float pivot, index workcount);
template __global__ void partition_count<float,select_config<10, 5, 8, true, true, true, 8, 10, 10>>(const float* in, index* counts, index size, float pivot, index workcount);
template __host__ __device__ launch_parameters get_launch_parameters<double,select_config<10, 10, 8, false, false, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<double,select_config<10, 10, 8, false, true, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<double,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<double,select_config<10, 10, 8, true, false, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<double,select_config<10, 10, 8, true, true, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<double,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<double,select_config<10, 11, 9, false, true, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<double,select_config<10, 11, 9, true, true, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<double,select_config<10, 8, 6, false, true, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<double,select_config<10, 8, 6, true, true, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<double,select_config<10, 9, 7, false, true, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<double,select_config<10, 9, 7, true, true, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<float,select_config<10, 10, 8, false, false, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<float,select_config<10, 10, 8, false, true, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<float,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<float,select_config<10, 10, 8, true, false, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<float,select_config<10, 10, 8, true, true, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<float,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<float,select_config<10, 11, 9, false, true, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<float,select_config<10, 11, 9, true, true, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<float,select_config<10, 12, 10, false, true, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<float,select_config<10, 12, 10, true, true, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<float,select_config<10, 8, 6, false, true, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<float,select_config<10, 8, 6, true, true, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<float,select_config<10, 9, 7, false, true, false, 8, 10, 10>>(index size);
template __host__ __device__ launch_parameters get_launch_parameters<float,select_config<10, 9, 7, true, true, false, 8, 10, 10>>(index size);
template __host__ __device__ void build_searchtree<double,select_config<10, 10, 8, false, false, false, 8, 10, 10>>(const double* in, double* out, index size);
template __host__ __device__ void build_searchtree<double,select_config<10, 10, 8, false, false, true, 8, 10, 10>>(const double* in, double* out, index size);
template __host__ __device__ void build_searchtree<double,select_config<10, 10, 8, false, true, false, 8, 10, 10>>(const double* in, double* out, index size);
template __host__ __device__ void build_searchtree<double,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const double* in, double* out, index size);
template __host__ __device__ void build_searchtree<double,select_config<10, 10, 8, true, false, false, 8, 10, 10>>(const double* in, double* out, index size);
template __host__ __device__ void build_searchtree<double,select_config<10, 10, 8, true, false, true, 8, 10, 10>>(const double* in, double* out, index size);
template __host__ __device__ void build_searchtree<double,select_config<10, 10, 8, true, true, false, 8, 10, 10>>(const double* in, double* out, index size);
template __host__ __device__ void build_searchtree<double,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const double* in, double* out, index size);
template __host__ __device__ void build_searchtree<double,select_config<10, 11, 9, false, true, false, 8, 10, 10>>(const double* in, double* out, index size);
template __host__ __device__ void build_searchtree<double,select_config<10, 11, 9, true, true, false, 8, 10, 10>>(const double* in, double* out, index size);
template __host__ __device__ void build_searchtree<double,select_config<10, 8, 6, false, true, false, 8, 10, 10>>(const double* in, double* out, index size);
template __host__ __device__ void build_searchtree<double,select_config<10, 8, 6, true, true, false, 8, 10, 10>>(const double* in, double* out, index size);
template __host__ __device__ void build_searchtree<double,select_config<10, 9, 7, false, true, false, 8, 10, 10>>(const double* in, double* out, index size);
template __host__ __device__ void build_searchtree<double,select_config<10, 9, 7, true, true, false, 8, 10, 10>>(const double* in, double* out, index size);
template __host__ __device__ void build_searchtree<float,select_config<10, 10, 8, false, false, false, 8, 10, 10>>(const float* in, float* out, index size);
template __host__ __device__ void build_searchtree<float,select_config<10, 10, 8, false, false, true, 8, 10, 10>>(const float* in, float* out, index size);
template __host__ __device__ void build_searchtree<float,select_config<10, 10, 8, false, true, false, 8, 10, 10>>(const float* in, float* out, index size);
template __host__ __device__ void build_searchtree<float,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const float* in, float* out, index size);
template __host__ __device__ void build_searchtree<float,select_config<10, 10, 8, true, false, false, 8, 10, 10>>(const float* in, float* out, index size);
template __host__ __device__ void build_searchtree<float,select_config<10, 10, 8, true, false, true, 8, 10, 10>>(const float* in, float* out, index size);
template __host__ __device__ void build_searchtree<float,select_config<10, 10, 8, true, true, false, 8, 10, 10>>(const float* in, float* out, index size);
template __host__ __device__ void build_searchtree<float,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const float* in, float* out, index size);
template __host__ __device__ void build_searchtree<float,select_config<10, 11, 9, false, true, false, 8, 10, 10>>(const float* in, float* out, index size);
template __host__ __device__ void build_searchtree<float,select_config<10, 11, 9, true, true, false, 8, 10, 10>>(const float* in, float* out, index size);
template __host__ __device__ void build_searchtree<float,select_config<10, 12, 10, false, true, false, 8, 10, 10>>(const float* in, float* out, index size);
template __host__ __device__ void build_searchtree<float,select_config<10, 12, 10, true, true, false, 8, 10, 10>>(const float* in, float* out, index size);
template __host__ __device__ void build_searchtree<float,select_config<10, 8, 6, false, true, false, 8, 10, 10>>(const float* in, float* out, index size);
template __host__ __device__ void build_searchtree<float,select_config<10, 8, 6, true, true, false, 8, 10, 10>>(const float* in, float* out, index size);
template __host__ __device__ void build_searchtree<float,select_config<10, 9, 7, false, true, false, 8, 10, 10>>(const float* in, float* out, index size);
template __host__ __device__ void build_searchtree<float,select_config<10, 9, 7, true, true, false, 8, 10, 10>>(const float* in, float* out, index size);
template __host__ __device__ void collect_bucket<double,select_config<10, 10, 8, false, false, false, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* prefix_sum, double* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<double,select_config<10, 10, 8, false, false, true, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* prefix_sum, double* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<double,select_config<10, 10, 8, false, true, false, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* prefix_sum, double* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<double,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* prefix_sum, double* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<double,select_config<10, 10, 8, true, false, false, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* prefix_sum, double* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<double,select_config<10, 10, 8, true, false, true, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* prefix_sum, double* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<double,select_config<10, 10, 8, true, true, false, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* prefix_sum, double* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<double,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* prefix_sum, double* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<double,select_config<10, 11, 9, false, true, false, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* prefix_sum, double* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<double,select_config<10, 11, 9, true, true, false, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* prefix_sum, double* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<double,select_config<10, 8, 6, false, true, false, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* prefix_sum, double* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<double,select_config<10, 8, 6, true, true, false, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* prefix_sum, double* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<double,select_config<10, 9, 7, false, true, false, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* prefix_sum, double* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<double,select_config<10, 9, 7, true, true, false, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* prefix_sum, double* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<float,select_config<10, 10, 8, false, false, false, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<float,select_config<10, 10, 8, false, false, true, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<float,select_config<10, 10, 8, false, true, false, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<float,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<float,select_config<10, 10, 8, true, false, false, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<float,select_config<10, 10, 8, true, false, true, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<float,select_config<10, 10, 8, true, true, false, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<float,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<float,select_config<10, 11, 9, false, true, false, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<float,select_config<10, 11, 9, true, true, false, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<float,select_config<10, 12, 10, false, true, false, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<float,select_config<10, 12, 10, true, true, false, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<float,select_config<10, 8, 6, false, true, false, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<float,select_config<10, 8, 6, true, true, false, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<float,select_config<10, 9, 7, false, true, false, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket<float,select_config<10, 9, 7, true, true, false, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, oracle bucket, index* atomic);
template __host__ __device__ void collect_bucket_indirect<double,select_config<10, 10, 8, false, false, true, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* prefix_sum, double* out, index size, const oracle* bucket, index* atomic);
template __host__ __device__ void collect_bucket_indirect<double,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* prefix_sum, double* out, index size, const oracle* bucket, index* atomic);
template __host__ __device__ void collect_bucket_indirect<double,select_config<10, 10, 8, true, false, true, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* prefix_sum, double* out, index size, const oracle* bucket, index* atomic);
template __host__ __device__ void collect_bucket_indirect<double,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* prefix_sum, double* out, index size, const oracle* bucket, index* atomic);
template __host__ __device__ void collect_bucket_indirect<float,select_config<10, 10, 8, false, false, true, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, const oracle* bucket, index* atomic);
template __host__ __device__ void collect_bucket_indirect<float,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, const oracle* bucket, index* atomic);
template __host__ __device__ void collect_bucket_indirect<float,select_config<10, 10, 8, true, false, true, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, const oracle* bucket, index* atomic);
template __host__ __device__ void collect_bucket_indirect<float,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* prefix_sum, float* out, index size, const oracle* bucket, index* atomic);
template __host__ __device__ void collect_buckets<double,select_config<10, 10, 8, false, false, true, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* block_prefix_sum, const index* bucket_out_ranges, double* out, index size, mask* buckets, index* atomic);
template __host__ __device__ void collect_buckets<double,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* block_prefix_sum, const index* bucket_out_ranges, double* out, index size, mask* buckets, index* atomic);
template __host__ __device__ void collect_buckets<double,select_config<10, 10, 8, true, false, true, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* block_prefix_sum, const index* bucket_out_ranges, double* out, index size, mask* buckets, index* atomic);
template __host__ __device__ void collect_buckets<double,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const double* data, const poracle* oracles_packed, const index* block_prefix_sum, const index* bucket_out_ranges, double* out, index size, mask* buckets, index* atomic);
template __host__ __device__ void collect_buckets<float,select_config<10, 10, 8, false, false, true, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* block_prefix_sum, const index* bucket_out_ranges, float* out, index size, mask* buckets, index* atomic);
template __host__ __device__ void collect_buckets<float,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* block_prefix_sum, const index* bucket_out_ranges, float* out, index size, mask* buckets, index* atomic);
template __host__ __device__ void collect_buckets<float,select_config<10, 10, 8, true, false, true, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* block_prefix_sum, const index* bucket_out_ranges, float* out, index size, mask* buckets, index* atomic);
template __host__ __device__ void collect_buckets<float,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const float* data, const poracle* oracles_packed, const index* block_prefix_sum, const index* bucket_out_ranges, float* out, index size, mask* buckets, index* atomic);
template __host__ __device__ void count_buckets<double,select_config<10, 10, 8, false, false, true, 8, 10, 10>>(const double* in, const double* tree, index* localcounts, index* counts, poracle* oracles, index size);
template __host__ __device__ void count_buckets<double,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const double* in, const double* tree, index* localcounts, index* counts, poracle* oracles, index size);
template __host__ __device__ void count_buckets<double,select_config<10, 10, 8, true, false, true, 8, 10, 10>>(const double* in, const double* tree, index* localcounts, index* counts, poracle* oracles, index size);
template __host__ __device__ void count_buckets<double,select_config<10, 10, 8, true, true, false, 8, 10, 10>>(const double* in, const double* tree, index* localcounts, index* counts, poracle* oracles, index size);
template __host__ __device__ void count_buckets<double,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const double* in, const double* tree, index* localcounts, index* counts, poracle* oracles, index size);
template __host__ __device__ void count_buckets<double,select_config<10, 11, 9, true, true, false, 8, 10, 10>>(const double* in, const double* tree, index* localcounts, index* counts, poracle* oracles, index size);
template __host__ __device__ void count_buckets<float,select_config<10, 10, 8, false, false, true, 8, 10, 10>>(const float* in, const float* tree, index* localcounts, index* counts, poracle* oracles, index size);
template __host__ __device__ void count_buckets<float,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const float* in, const float* tree, index* localcounts, index* counts, poracle* oracles, index size);
template __host__ __device__ void count_buckets<float,select_config<10, 10, 8, true, false, true, 8, 10, 10>>(const float* in, const float* tree, index* localcounts, index* counts, poracle* oracles, index size);
template __host__ __device__ void count_buckets<float,select_config<10, 10, 8, true, true, false, 8, 10, 10>>(const float* in, const float* tree, index* localcounts, index* counts, poracle* oracles, index size);
template __host__ __device__ void count_buckets<float,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const float* in, const float* tree, index* localcounts, index* counts, poracle* oracles, index size);
template __host__ __device__ void count_buckets<float,select_config<10, 11, 9, true, true, false, 8, 10, 10>>(const float* in, const float* tree, index* localcounts, index* counts, poracle* oracles, index size);
template __host__ __device__ void count_buckets<float,select_config<10, 12, 10, true, true, false, 8, 10, 10>>(const float* in, const float* tree, index* localcounts, index* counts, poracle* oracles, index size);
template __host__ __device__ void ssss_merged<double,select_config<10, 10, 8, false, false, true, 8, 10, 10>>(const double* in, double* out, poracle* oracles, index offset, const index* ranks, index rank_offset, index rank_base, const kernels::ssss_multi_aux<double, select_config<10, 10, 8, false, false, true, 8, 10, 10>>* aux_in, kernels::ssss_multi_aux<double, select_config<10, 10, 8, false, false, true, 8, 10, 10>>* aux_outs, double* out_tree);
template __host__ __device__ void ssss_merged<double,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const double* in, double* out, poracle* oracles, index offset, const index* ranks, index rank_offset, index rank_base, const kernels::ssss_multi_aux<double, select_config<10, 10, 8, false, true, true, 8, 10, 10>>* aux_in, kernels::ssss_multi_aux<double, select_config<10, 10, 8, false, true, true, 8, 10, 10>>* aux_outs, double* out_tree);
template __host__ __device__ void ssss_merged<double,select_config<10, 10, 8, true, false, true, 8, 10, 10>>(const double* in, double* out, poracle* oracles, index offset, const index* ranks, index rank_offset, index rank_base, const kernels::ssss_multi_aux<double, select_config<10, 10, 8, true, false, true, 8, 10, 10>>* aux_in, kernels::ssss_multi_aux<double, select_config<10, 10, 8, true, false, true, 8, 10, 10>>* aux_outs, double* out_tree);
template __host__ __device__ void ssss_merged<double,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const double* in, double* out, poracle* oracles, index offset, const index* ranks, index rank_offset, index rank_base, const kernels::ssss_multi_aux<double, select_config<10, 10, 8, true, true, true, 8, 10, 10>>* aux_in, kernels::ssss_multi_aux<double, select_config<10, 10, 8, true, true, true, 8, 10, 10>>* aux_outs, double* out_tree);
template __host__ __device__ void ssss_merged<float,select_config<10, 10, 8, false, false, true, 8, 10, 10>>(const float* in, float* out, poracle* oracles, index offset, const index* ranks, index rank_offset, index rank_base, const kernels::ssss_multi_aux<float, select_config<10, 10, 8, false, false, true, 8, 10, 10>>* aux_in, kernels::ssss_multi_aux<float, select_config<10, 10, 8, false, false, true, 8, 10, 10>>* aux_outs, float* out_tree);
template __host__ __device__ void ssss_merged<float,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(const float* in, float* out, poracle* oracles, index offset, const index* ranks, index rank_offset, index rank_base, const kernels::ssss_multi_aux<float, select_config<10, 10, 8, false, true, true, 8, 10, 10>>* aux_in, kernels::ssss_multi_aux<float, select_config<10, 10, 8, false, true, true, 8, 10, 10>>* aux_outs, float* out_tree);
template __host__ __device__ void ssss_merged<float,select_config<10, 10, 8, true, false, true, 8, 10, 10>>(const float* in, float* out, poracle* oracles, index offset, const index* ranks, index rank_offset, index rank_base, const kernels::ssss_multi_aux<float, select_config<10, 10, 8, true, false, true, 8, 10, 10>>* aux_in, kernels::ssss_multi_aux<float, select_config<10, 10, 8, true, false, true, 8, 10, 10>>* aux_outs, float* out_tree);
template __host__ __device__ void ssss_merged<float,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(const float* in, float* out, poracle* oracles, index offset, const index* ranks, index rank_offset, index rank_base, const kernels::ssss_multi_aux<float, select_config<10, 10, 8, true, true, true, 8, 10, 10>>* aux_in, kernels::ssss_multi_aux<float, select_config<10, 10, 8, true, true, true, 8, 10, 10>>* aux_outs, float* out_tree);
template void quickselect<double,select_config<10, 10, 8, false, true, true, 2, 10, 10>>(double* in, double* tmp, index* count_tmp, index size, index rank, double* out);
template void quickselect<double,select_config<10, 10, 8, false, true, true, 4, 10, 10>>(double* in, double* tmp, index* count_tmp, index size, index rank, double* out);
template void quickselect<double,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(double* in, double* tmp, index* count_tmp, index size, index rank, double* out);
template void quickselect<double,select_config<10, 10, 8, false, true, true, 8, 8, 10>>(double* in, double* tmp, index* count_tmp, index size, index rank, double* out);
template void quickselect<double,select_config<10, 10, 8, false, true, true, 8, 9, 10>>(double* in, double* tmp, index* count_tmp, index size, index rank, double* out);
template void quickselect<double,select_config<10, 10, 8, true, true, true, 2, 10, 10>>(double* in, double* tmp, index* count_tmp, index size, index rank, double* out);
template void quickselect<double,select_config<10, 10, 8, true, true, true, 4, 10, 10>>(double* in, double* tmp, index* count_tmp, index size, index rank, double* out);
template void quickselect<double,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(double* in, double* tmp, index* count_tmp, index size, index rank, double* out);
template void quickselect<double,select_config<10, 10, 8, true, true, true, 8, 8, 10>>(double* in, double* tmp, index* count_tmp, index size, index rank, double* out);
template void quickselect<double,select_config<10, 10, 8, true, true, true, 8, 9, 10>>(double* in, double* tmp, index* count_tmp, index size, index rank, double* out);
template void quickselect<double,select_config<10, 5, 8, false, true, true, 8, 10, 10>>(double* in, double* tmp, index* count_tmp, index size, index rank, double* out);
template void quickselect<double,select_config<10, 5, 8, true, true, true, 8, 10, 10>>(double* in, double* tmp, index* count_tmp, index size, index rank, double* out);
template void quickselect<double,select_config<8, 10, 8, false, true, true, 8, 10, 10>>(double* in, double* tmp, index* count_tmp, index size, index rank, double* out);
template void quickselect<double,select_config<8, 10, 8, true, true, true, 8, 10, 10>>(double* in, double* tmp, index* count_tmp, index size, index rank, double* out);
template void quickselect<double,select_config<9, 10, 8, false, true, true, 8, 10, 10>>(double* in, double* tmp, index* count_tmp, index size, index rank, double* out);
template void quickselect<double,select_config<9, 10, 8, true, true, true, 8, 10, 10>>(double* in, double* tmp, index* count_tmp, index size, index rank, double* out);
template void quickselect<float,select_config<10, 10, 8, false, true, true, 2, 10, 10>>(float* in, float* tmp, index* count_tmp, index size, index rank, float* out);
template void quickselect<float,select_config<10, 10, 8, false, true, true, 4, 10, 10>>(float* in, float* tmp, index* count_tmp, index size, index rank, float* out);
template void quickselect<float,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(float* in, float* tmp, index* count_tmp, index size, index rank, float* out);
template void quickselect<float,select_config<10, 10, 8, false, true, true, 8, 8, 10>>(float* in, float* tmp, index* count_tmp, index size, index rank, float* out);
template void quickselect<float,select_config<10, 10, 8, false, true, true, 8, 9, 10>>(float* in, float* tmp, index* count_tmp, index size, index rank, float* out);
template void quickselect<float,select_config<10, 10, 8, true, true, true, 2, 10, 10>>(float* in, float* tmp, index* count_tmp, index size, index rank, float* out);
template void quickselect<float,select_config<10, 10, 8, true, true, true, 4, 10, 10>>(float* in, float* tmp, index* count_tmp, index size, index rank, float* out);
template void quickselect<float,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(float* in, float* tmp, index* count_tmp, index size, index rank, float* out);
template void quickselect<float,select_config<10, 10, 8, true, true, true, 8, 8, 10>>(float* in, float* tmp, index* count_tmp, index size, index rank, float* out);
template void quickselect<float,select_config<10, 10, 8, true, true, true, 8, 9, 10>>(float* in, float* tmp, index* count_tmp, index size, index rank, float* out);
template void quickselect<float,select_config<10, 5, 8, false, true, true, 8, 10, 10>>(float* in, float* tmp, index* count_tmp, index size, index rank, float* out);
template void quickselect<float,select_config<10, 5, 8, true, true, true, 8, 10, 10>>(float* in, float* tmp, index* count_tmp, index size, index rank, float* out);
template void quickselect<float,select_config<8, 10, 8, false, true, true, 8, 10, 10>>(float* in, float* tmp, index* count_tmp, index size, index rank, float* out);
template void quickselect<float,select_config<8, 10, 8, true, true, true, 8, 10, 10>>(float* in, float* tmp, index* count_tmp, index size, index rank, float* out);
template void quickselect<float,select_config<9, 10, 8, false, true, true, 8, 10, 10>>(float* in, float* tmp, index* count_tmp, index size, index rank, float* out);
template void quickselect<float,select_config<9, 10, 8, true, true, true, 8, 10, 10>>(float* in, float* tmp, index* count_tmp, index size, index rank, float* out);
template void quickselect_multi<double,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(double* in, double* tmp, index* count_tmp, index size, const index* ranks, index rank_count, double* out);
template void quickselect_multi<double,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(double* in, double* tmp, index* count_tmp, index size, const index* ranks, index rank_count, double* out);
template void quickselect_multi<double,select_config<10, 5, 8, false, true, true, 8, 10, 10>>(double* in, double* tmp, index* count_tmp, index size, const index* ranks, index rank_count, double* out);
template void quickselect_multi<double,select_config<10, 5, 8, true, true, true, 8, 10, 10>>(double* in, double* tmp, index* count_tmp, index size, const index* ranks, index rank_count, double* out);
template void quickselect_multi<float,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(float* in, float* tmp, index* count_tmp, index size, const index* ranks, index rank_count, float* out);
template void quickselect_multi<float,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(float* in, float* tmp, index* count_tmp, index size, const index* ranks, index rank_count, float* out);
template void quickselect_multi<float,select_config<10, 5, 8, false, true, true, 8, 10, 10>>(float* in, float* tmp, index* count_tmp, index size, const index* ranks, index rank_count, float* out);
template void quickselect_multi<float,select_config<10, 5, 8, true, true, true, 8, 10, 10>>(float* in, float* tmp, index* count_tmp, index size, const index* ranks, index rank_count, float* out);
template void sampleselect<double,select_config<10, 10, 6, false, false, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 6, false, true, true, 8, 10, 10, false, 1024>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 6, false, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 6, true, false, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 6, true, true, true, 8, 10, 10, false, 1024>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 6, true, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 7, false, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 7, true, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, false, false, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, false, true, true, 2, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, false, true, true, 4, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, false, true, true, 8, 10, 10, false, 16>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, false, true, true, 8, 10, 10, false, 4>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, false, true, true, 8, 10, 10, false, 8, 0>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, false, true, true, 8, 10, 10, true>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, false, true, true, 8, 8, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, false, true, true, 8, 9, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, true, false, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, true, true, true, 2, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, true, true, true, 4, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, true, true, true, 8, 10, 10, false, 16>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, true, true, true, 8, 10, 10, false, 4>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, true, true, true, 8, 10, 10, false, 8, 0>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, true, true, true, 8, 10, 10, true>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, true, true, true, 8, 8, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<10, 10, 8, true, true, true, 8, 9, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<8, 10, 8, false, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<8, 10, 8, true, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<9, 10, 8, false, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<double,select_config<9, 10, 8, true, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect<float,select_config<10, 10, 6, false, false, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 6, false, true, true, 8, 10, 10, false, 1024>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 6, false, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 6, true, false, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 6, true, true, true, 8, 10, 10, false, 1024>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 6, true, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 7, false, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 7, true, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, false, false, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, false, true, true, 2, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, false, true, true, 4, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, false, true, true, 8, 10, 10, false, 16>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, false, true, true, 8, 10, 10, false, 4>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, false, true, true, 8, 10, 10, false, 8, 0>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, false, true, true, 8, 10, 10, true>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, false, true, true, 8, 8, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, false, true, true, 8, 9, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, true, false, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, true, true, true, 2, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, true, true, true, 4, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, true, true, true, 8, 10, 10, false, 16>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, true, true, true, 8, 10, 10, false, 4>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, true, true, true, 8, 10, 10, false, 8, 0>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, true, true, true, 8, 10, 10, true>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, true, true, true, 8, 8, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<10, 10, 8, true, true, true, 8, 9, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<8, 10, 8, false, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<8, 10, 8, true, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<9, 10, 8, false, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect<float,select_config<9, 10, 8, true, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<double,select_config<10, 10, 6, false, false, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 6, false, true, true, 8, 10, 10, false, 1024>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 6, false, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 6, true, false, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 6, true, true, true, 8, 10, 10, false, 1024>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 6, true, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 7, false, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 7, true, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, false, false, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, false, true, true, 2, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, false, true, true, 4, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, false, true, true, 8, 10, 10, false, 16>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, false, true, true, 8, 10, 10, false, 4>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, false, true, true, 8, 10, 10, false, 8, 0>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, false, true, true, 8, 10, 10, true>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, false, true, true, 8, 8, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, false, true, true, 8, 9, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, true, false, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, true, true, true, 2, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, true, true, true, 4, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, true, true, true, 8, 10, 10, false, 16>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, true, true, true, 8, 10, 10, false, 4>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, true, true, true, 8, 10, 10, false, 8, 0>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, true, true, true, 8, 10, 10, true>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, true, true, true, 8, 8, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<10, 10, 8, true, true, true, 8, 9, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<8, 10, 8, false, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<8, 10, 8, true, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<9, 10, 8, false, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<double,select_config<9, 10, 8, true, true, true, 8, 10, 10>>(double* in, double* tmp, double* tree, index* count_tmp, index size, index rank, double* out);
template void sampleselect_host<float,select_config<10, 10, 6, false, false, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 6, false, true, true, 8, 10, 10, false, 1024>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 6, false, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 6, true, false, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 6, true, true, true, 8, 10, 10, false, 1024>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 6, true, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 7, false, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 7, true, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, false, false, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, false, true, true, 2, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, false, true, true, 4, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, false, true, true, 8, 10, 10, false, 16>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, false, true, true, 8, 10, 10, false, 4>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, false, true, true, 8, 10, 10, false, 8, 0>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, false, true, true, 8, 10, 10, true>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, false, true, true, 8, 8, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, false, true, true, 8, 9, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, true, false, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, true, true, true, 2, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, true, true, true, 4, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, true, true, true, 8, 10, 10, false, 16>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, true, true, true, 8, 10, 10, false, 4>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, true, true, true, 8, 10, 10, false, 8, 0>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, true, true, true, 8, 10, 10, true>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, true, true, true, 8, 8, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<10, 10, 8, true, true, true, 8, 9, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<8, 10, 8, false, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<8, 10, 8, true, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<9, 10, 8, false, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_host<float,select_config<9, 10, 8, true, true, true, 8, 10, 10>>(float* in, float* tmp, float* tree, index* count_tmp, index size, index rank, float* out);
template void sampleselect_multi<double,select_config<10, 10, 6, false, false, true, 8, 10, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 6, false, true, true, 8, 10, 10, false, 1024>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 6, false, true, true, 8, 10, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 6, true, false, true, 8, 10, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 6, true, true, true, 8, 10, 10, false, 1024>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 6, true, true, true, 8, 10, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 7, false, true, true, 8, 10, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 7, true, true, true, 8, 10, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, false, false, true, 8, 10, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, false, true, true, 2, 10, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, false, true, true, 4, 10, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, false, true, true, 8, 10, 10, false, 16>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, false, true, true, 8, 10, 10, false, 4>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, false, true, true, 8, 10, 10, false, 8, 0>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, false, true, true, 8, 10, 10, true>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, false, true, true, 8, 8, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, false, true, true, 8, 9, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, true, false, true, 8, 10, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, true, true, true, 2, 10, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, true, true, true, 4, 10, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, true, true, true, 8, 10, 10, false, 16>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, true, true, true, 8, 10, 10, false, 4>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, true, true, true, 8, 10, 10, false, 8, 0>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, true, true, true, 8, 10, 10, true>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, true, true, true, 8, 8, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<10, 10, 8, true, true, true, 8, 9, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<8, 10, 8, false, true, true, 8, 10, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<8, 10, 8, true, true, true, 8, 10, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<9, 10, 8, false, true, true, 8, 10, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<double,select_config<9, 10, 8, true, true, true, 8, 10, 10>>(double* in, double* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, double* out);
template void sampleselect_multi<float,select_config<10, 10, 6, false, false, true, 8, 10, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 6, false, true, true, 8, 10, 10, false, 1024>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 6, false, true, true, 8, 10, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 6, true, false, true, 8, 10, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 6, true, true, true, 8, 10, 10, false, 1024>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 6, true, true, true, 8, 10, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 7, false, true, true, 8, 10, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 7, true, true, true, 8, 10, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, false, false, true, 8, 10, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, false, true, true, 2, 10, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, false, true, true, 4, 10, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, false, true, true, 8, 10, 10, false, 16>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, false, true, true, 8, 10, 10, false, 4>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, false, true, true, 8, 10, 10, false, 8, 0>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, false, true, true, 8, 10, 10, true>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, false, true, true, 8, 10, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, false, true, true, 8, 8, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, false, true, true, 8, 9, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, true, false, true, 8, 10, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, true, true, true, 2, 10, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, true, true, true, 4, 10, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, true, true, true, 8, 10, 10, false, 16>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, true, true, true, 8, 10, 10, false, 4>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, true, true, true, 8, 10, 10, false, 8, 0>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, true, true, true, 8, 10, 10, true>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, true, true, true, 8, 10, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, true, true, true, 8, 8, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<10, 10, 8, true, true, true, 8, 9, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<8, 10, 8, false, true, true, 8, 10, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<8, 10, 8, true, true, true, 8, 10, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<9, 10, 8, false, true, true, 8, 10, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);
template void sampleselect_multi<float,select_config<9, 10, 8, true, true, true, 8, 10, 10>>(float* in, float* tmp, index size, const index* ranks, index rank_count, index* tmp_storage, index* aux_storage, index* aux_atomic, float* out);